// This is your Prisma schema file.
// DB: PostgreSQL

// =================== GENERATOR & DATASOURCE ===================
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================== ENUMS ===================
enum Role {
  Admin
  Cashier
  Manager
  StockKeeper
}

enum PaymentMethod {
  CASH
  CARD
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum RequestStatus {
  PENDING
  PURCHASED
  REJECTED
  COMPLETED
}

// ===== NEW (for credit ledger) =====
enum CreditEntryType {
  INVOICE     // credit extended (usually at sale time)
  SETTLEMENT  // payment received against credit
}

// =================== MODELS ===================
model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  contact          String
  password         String
  role             Role      @default(Cashier)
  colorCode        String    @default("#000000")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  sales            Sale[]
  payments         Payment[]
  refreshTokenHash String?
}

model Customer {
  id      Int    @id @default(autoincrement())
  name    String
  contact String @unique

  payments Payment[]
}

model Supplier {
  id           Int                      @id @default(autoincrement())
  name         String
  contact      String
  email        String?
  address      String?
  brand        String
  colorCode    String                   @default("#000000")
  location     String
  status       SupplierStatus?
  stockItems   Stock[]
  items        Item[]
  requests     SupplierRequestDetails[]
  transactions SupplierTransaction[]
  preferred    Boolean                  @default(false)
  paymentTerms String?
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stock {
  id             Int     @id @default(autoincrement())
  batchId        String
  itemId         Int
  quantity       Int
  unitPrice      Float
  sellPrice      Float
  discountAmount Float   @default(0)

  item       Item     @relation(fields: [itemId], references: [id])
  supplierId Int
  supplier   Supplier @relation(fields: [supplierId], references: [id])
}

model Invoice {
  id            Int    @id @default(autoincrement())
  batchId       String
  itemId        Int
  quantity      Int
  saleInvoiceId Int

  saleInvoice Payment? @relation(fields: [saleInvoiceId], references: [id])
}

model Payment {
  id              Int      @id @default(autoincrement())
  amount          Float
  remainAmount    Float
  date            DateTime
  fileName        String
  type            String
  saleInvoiceId   Int?
  userId          Int?
  customerContact String?

  invoices Invoice[]
  user     User?     @relation(fields: [userId], references: [id])
  customer Customer? @relation(fields: [customerContact], references: [contact])

  // ---- NEW: back-relation for CreditEntry.payment (no DB column created) ----
  creditEntries CreditEntry[] @relation("PaymentCreditEntries")
}

model Item {
  id           Int      @id @default(autoincrement())
  name         String
  barcode      String   @unique
  categoryId   Int
  category     Category @relation("CategoryItems", fields: [categoryId], references: [id])
  supplierId   Int
  reorderLevel Int      @default(0)
  gradient     String?
  remark       String?  @db.Text
  colorCode    String   @default("#000000")

  supplier Supplier @relation(fields: [supplierId], references: [id])
  stock    Stock[]
}

model Category {
  id        Int    @id @default(autoincrement())
  category  String
  colorCode String
  items     Item[] @relation("CategoryItems")
}

// my code Inscode 
model Sale {
  id     Int      @id @default(autoincrement())
  date   DateTime @default(now())
  total  Float
  userId Int
  user   User     @relation(fields: [userId], references: [id])
}

model SupplierRequestDetails {
  id         Int      @id @default(autoincrement())
  supplierId Int
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  status     RequestStatus
}

model SupplierTransaction {
  id         Int      @id @default(autoincrement())
  supplierId Int
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  amount     Float
  date       DateTime @default(now())
}

// =================== NEW: CREDITORS & LEDGER ===================
model Creditor {
  id        Int           @id @default(autoincrement())
  name      String
  phone     String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  credits   CreditEntry[]
}

model CreditEntry {
  id         Int             @id @default(autoincrement())
  entryType  CreditEntryType
  refNo      String
  amount     Float
  date       DateTime        @default(now())

  // Relations
  creditorId Int
  creditor   Creditor        @relation(fields: [creditorId], references: [id], onDelete: Restrict)

  // Optional link back to Payment (requires back-relation field on Payment)
  paymentId  Int?
  payment    Payment?        @relation("PaymentCreditEntries", fields: [paymentId], references: [id], onDelete: SetNull)

  @@index([creditorId])
  @@index([paymentId])
}
