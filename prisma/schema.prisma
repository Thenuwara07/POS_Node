// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin 
  Cashier
  Manager
  StockKeeper
}

enum PaymentMethod {
  CASH
  CARD
}

model User {
  id        Int   @id @default(autoincrement())
  name      String
  email     String   @unique
  contact   String
  password  String
  role      Role     @default(Cashier)
  colorCode String   @default("#000000")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
  payments Payment[]
  refreshTokenHash String?
}

model Customer {
  id      Int      @id @default(autoincrement())
  name    String
  contact String @unique

  payments Payment[]
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model Supplier {
  id      Int      @id @default(autoincrement())
  name    String
  contact String
  email     String?      // Optional email
  address   String?      // Optional address
  brand   String
  colorCode String   @default("#000000")
  location  String
  status    SupplierStatus? 
  stockItems        Stock[]
  items             Item[]
  requests          SupplierRequestDetails[]
  transactions      SupplierTransaction[]
  preferred     Boolean        @default(false)  // ✅ Preferred Supplier
  paymentTerms  String?           // ✅ Payment Terms         
  notes         String?          // ✅ Remarks/Notes              

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Stock {
  id         Int      @id @default(autoincrement())
  batchId    String
  itemId     Int
  quantity   Int
  unitPrice  Float
  sellPrice  Float

  item     Item     @relation(fields: [itemId], references: [id])
  supplierId Int
  supplier   Supplier @relation(fields: [supplierId], references: [id])
}

model Invoice {
  id           Int      @id @default(autoincrement())
  batchId      String
  itemId       Int
  quantity     Int
  saleInvoiceId Int

  saleInvoice Payment? @relation(fields: [saleInvoiceId], references: [id])
}

model Payment {
  id            Int       @id @default(autoincrement())
  amount        Float
  remainAmount  Float
  date          DateTime
  fileName      String
  type          String
  saleInvoiceId Int?
  userId        Int?
  customerContact String?

  invoices  Invoice[]
  user     User?     @relation(fields: [userId], references: [id])
  customer Customer? @relation(fields: [customerContact], references: [contact])
}

model Item {
  id            Int      @id @default(autoincrement())
  name          String
  barcode       String    @unique
  unit          String
  category      String
  status        String    @default("Active") // "Active" or "Inactive"
  cost          Float
  markup        Float
  salePrice     Float
  supplierId    Int
  reorderLevel  Int       @default(0)
  lowStockWarn  Boolean   @default(true)
  gradient      String?   // save gradient/color info (HEX or JSON if multiple colors)
  remark        String?   @db.Text
  colorCode     String    @default("#000000")

  supplier Supplier @relation(fields: [supplierId], references: [id])
  stock     Stock[]
}


// my code Inscode 

model Sale {
  id       Int      @id @default(autoincrement())
  date     DateTime @default(now())
  total    Float
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
  // add more fields & relations
}

model SupplierRequestDetails {
  id         Int      @id @default(autoincrement())
  supplierId Int
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  // other request fields
}

model SupplierTransaction {
  id         Int      @id @default(autoincrement())
  supplierId Int
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  amount     Float
  date       DateTime @default(now())
}
